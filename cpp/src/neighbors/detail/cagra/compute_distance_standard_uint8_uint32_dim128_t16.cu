/*
 * Copyright (c) 2024, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * NOTE: this file is generated by compute_distance_00_generate.py
 *
 * Make changes there and run in this directory:
 *
 * > python compute_distance_00_generate.py
 *
 */

#include "compute_distance_standard.cuh"

namespace cuvs::neighbors::cagra::detail {

template struct standard_dataset_descriptor_t<16, 128, uint8_t, uint32_t, float>;
template _RAFT_DEVICE auto
compute_distance_standard<standard_dataset_descriptor_t<16, 128, uint8_t, uint32_t, float>>(
  standard_dataset_descriptor_t<16, 128, uint8_t, uint32_t, float>::ws_handle,
  standard_dataset_descriptor_t<16, 128, uint8_t, uint32_t, float>::INDEX_T,
  cuvs::distance::DistanceType,
  bool valid) -> standard_dataset_descriptor_t<16, 128, uint8_t, uint32_t, float>::DISTANCE_T;
template <>
const void* standard_descriptor_spec<16, 128, uint8_t, uint32_t, float>::init_kernel =
  reinterpret_cast<const void*>(
    &standard_dataset_descriptor_init_kernel<16, 128, uint8_t, uint32_t, float>);
template struct standard_descriptor_spec<16, 128, uint8_t, uint32_t, float>;

}  // namespace cuvs::neighbors::cagra::detail
