# Copyright (c) 2024, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

template = """/*
 * Copyright (c) 2024, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * NOTE: this file is generated by distance_core_00_generate.py
 *
 * Make changes there and run in this directory:
 *
 * > python distance_core_00_generate.py
 *
 */

{includes}

namespace cuvs::neighbors::cagra::detail {{

{instances}

}}  // namespace cuvs::neighbors::cagra::detail
"""

mxdim_team = [(128, 8), (256, 16), (512, 32), (1024, 32)]
# block = [(64, 16), (128, 8), (256, 4), (512, 2), (1024, 1)]
# itopk_candidates = [64, 128, 256]
# itopk_size = [64, 128, 256, 512]
# mxelem = [64, 128, 256]

pq_bits = [8]
pq_lens = [2, 4]

# rblock = [(256, 4), (512, 2), (1024, 1)]
# rcandidates = [32]
# rsize = [256, 512]
code_book_types = ["half"]

search_types = dict(
    float_uint32=("float", "uint32_t", "float"),  # data_t, idx_t, distance_t
    half_uint32=("half", "uint32_t", "float"),
    int8_uint32=("int8_t", "uint32_t", "float"),
    uint8_uint32=("uint8_t", "uint32_t", "float"),
    float_uint64=("float", "uint64_t", "float"),
    half_uint64=("half", "uint64_t", "float"),
)

distance_core_ext = []

# knn
for type_path, (data_t, idx_t, distance_t) in search_types.items():
    for (mxdim, team) in mxdim_team:
        # CAGRA
        path = f"distance_core_{type_path}_dim{mxdim}_t{team}.cu"
        includes = '#include "compute_distance.hpp"'
        decl = f"template struct standard_dataset_descriptor_t<{team}, {mxdim}, {data_t}, {idx_t}, {distance_t}>;"
        distance_core_ext.append(f"extern {decl}")
        with open(path, "w") as f:
            f.write(template.format(includes=includes, instances=decl));
            print(f"src/neighbors/detail/cagra/{path}")

        # CAGRA-Q
        for code_book_t in code_book_types:
            for pq_len in pq_lens:
                for pq_bit in pq_bits:
                    path = f"distance_core_vpq_{type_path}_dim{mxdim}_t{team}_{pq_bit}pq_{pq_len}subd_{code_book_t}.cu"
                    decl = f"template struct cagra_q_dataset_descriptor_t<{team}, {mxdim}, {pq_bit}, {pq_len}, {code_book_t}, {data_t}, {idx_t}, {distance_t}>;"
                    includes = '#include "compute_distance_vpq.cuh"'
                    distance_core_ext.append(f"extern {decl}")
                    with open(path, "w") as f:
                        f.write(template.format(includes=includes, instances=decl));
                        print(f"src/neighbors/detail/cagra/{path}")

with open("distance_core-ext.cuh", "w") as f:
    f.write(template.format(includes='#include "compute_distance.hpp"', instances="\n".join(distance_core_ext)))
